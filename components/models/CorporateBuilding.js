/*
auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from 'three'
import React, { useRef } from 'react'
import { useLoader } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { meshopt } from '../../lib/meshopt'
import { Html } from 'drei'

function HtmlLabel({active, demand, setDemand}) {
  return (
    <Html zIndexRange={[950, 0]} style={{position: "relative"}}>
      <button 
        className={`outro-scene-label${ active ? ' outro-scene-label-active' : '' }`}
        onClick={() => setDemand(demand)}
      >
        <span className="outro-scene-label-number">{demand.index + 1}.</span> {demand.location}
      </button>
    </Html>
  )
}

export default function Model({ demands, demand, setDemand, ...props }) {
  const group = useRef()
  const { nodes, materials, cameras } = useLoader(GLTFLoader, './static/gltf/corporate-building.glb', meshopt())

  console.log(cameras);

  return (
    <group ref={group} {...props}>
      <group position={[7.048502, -0.1523998, -1.2957768]}>
        <group position={[-52.5731583, -1, -30.7363758]} scale={[0.0056811, 0.0056811, 0.0056811]}>
          <mesh material={materials.Terrain} geometry={nodes.mesh_0_0.geometry} />
          <mesh material={materials['Building Exterior']} geometry={nodes.mesh_0_1.geometry} />
          <mesh material={materials.Trees} geometry={nodes.mesh_0_2.geometry} />
          <mesh material={materials.Refinery} geometry={nodes.mesh_0_3.geometry} />
          <mesh material={materials.Houses} geometry={nodes.mesh_0_4.geometry} />
        </group>
      </group>
      <group position={[-21.310915, 1.7957656, -1.9220421]} scale={[1.0140398, 1.0140398, 1.0140398]}>
        <mesh
          material={materials['Fire.001']}
          geometry={nodes.mesh_1.geometry}
          position={[-52.5731583, -1, -30.7363758]}
          scale={[0.0056811, 0.0056811, 0.0056811]}
        />
      </group>
      <group position={[-20.7159252, 3.8683631, -14.1254005]} scale={[0.9779791, 0.9779791, 0.9779791]}>
        <mesh
          material={materials['Fire.001']}
          geometry={nodes.mesh_2.geometry}
          position={[-52.5731583, -1, -30.7363758]}
          scale={[0.0056811, 0.0056811, 0.0056811]}
        />
      </group>
      <group position={[-28.7889996, 8.4553471, -20.2464752]} scale={[1.07244, 1.07244, 1.07244]}>
        <mesh
          material={materials['Fire.001']}
          geometry={nodes.mesh_3.geometry}
          position={[-52.5731583, -1, -30.7363758]}
          scale={[0.0056811, 0.0056811, 0.0056811]}
        />
      </group>
      <group position={[-41.6630135, 15.7238789, -26.5504494]} scale={[0.5855824, 0.5855824, 0.5855824]}>
        <mesh
          material={materials['Fire.001']}
          geometry={nodes.mesh_4.geometry}
          position={[-52.5731583, -1, -30.7363758]}
          scale={[0.0056811, 0.0056811, 0.0056811]}
        />
      </group>
      <group>
        {demands.list().map(currentDemand => (
          <group
            key={currentDemand.id}
            position={currentDemand.position}
            rotation={[Math.PI / 2, 0, 0]}
          >
          <HtmlLabel
            active={currentDemand.id == demand.id}
            demand={currentDemand}
            setDemand={setDemand}
          />
        </group>
      ))}
      </group>
    </group>
  )
}
